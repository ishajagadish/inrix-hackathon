# -*- coding: utf-8 -*-
"""Hackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Katgq2BxvA3M8C_OY_OKv7ViFcP9qaAq
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import requests
import json
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense

def get_inrix_data():
  headers = {
      'Authorization': 'Bearer '  + 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhcHBJZCI6IjdzM2QxdmF5cGYiLCJ0b2tlbiI6eyJpdiI6ImNhMmE2NzI0ODhiZjY1MzhkYjM1MGExZDk4MGM2ZGQ0IiwiY29udGVudCI6ImIyMjQwYjRiYmMzYmIzOGI2OWQ4ODFiZmQ3MzM4NjE4YzM0OWE3MDBjMjZlYWU1ZWFhYTBlZWVlYTY5NjZlMTE3Yjk2NzkzODBmMTI1YTI1MDkyNmUwY2NhMjNkMTUyZTJhZTUzZmUxYzhmNjk2MjIyZTc0MzJlZDhlMGNhOGUwMjNhMzgzZThiMjEyY2MzODliNzgzMTRlMzBlY2RiNDc0Mjg4NGI0NGM0ZGY0ZThmMGY0OWE1ZTRlZDU4MmQzNzllY2VjNjU3NTE5MTlhMTEyMzk2OWNmZmE5NmQwM2MwMjI3N2M1ZGZiYmI1MDczZTA1ODRiNzI5MjI3YmZlMjhlM2QwZGYzNzcxMjY5YTBmNjRhNWEwODMxNmQ5NjMxMWVlMmY1M2YwYzM5OTE4YWY0MWE0NzljYWY0OTdjM2FjZjgxYmYwMzg4NTc4NjQ0NjE4YWQ1YWFmNDhjMWRmNzY1NDUxZDRhZjAyZGZjOWJhNzNjOTAwY2M4NDk3YmMwYWVjYmY0Nzc3MmRhYTViZTM4YWNkNmEwYTI0Y2QwNGU0YTI0OGQwYjRiMjI2NmE4MDAyNDQ2ZGE0MDI3NDk0N2E2MTkzNWI5MGNiNDVjMTkxZGEzMTk0MDc3OWUwZGFjZTZkOTY1YTQ0OTE3MGEyMzhlMWJmNGNkODI0ZThhMzQ5ODM2NjhjNjFmNDk0ZWQzNWJhYjZlNWMxOWZiYTY4YWVmZWQzZGFjNjYxYTdkY2U1MDI2YmY5MjE2ODBlMjdhYjY2OWY4OGM3MzE4NjFiYmQzYzZlYjBlNDAzZDAzM2M1MTY1MzBlM2QwNjA4ZWIyYjQ1YmNhN2RmMjg2Mzg1N2EzZjU4YjFjYzU0NmZhNjkxNGY3ODUwIn0sInNlY3VyaXR5VG9rZW4iOnsiaXYiOiJjYTJhNjcyNDg4YmY2NTM4ZGIzNTBhMWQ5ODBjNmRkNCIsImNvbnRlbnQiOiJhMTNjMjk2MWVmMzM5NmQzNGZkMDlmYzVkNDcwODQ2NWEwNjdkYTAxZGE1YWE2MWRhMGQwOTViZjlmYTg2ZDAzMWE5Njc3NGU2ZjQ0NGM1ZDRiMjFlMWYyIn0sImp0aSI6IjI4YmVjYzUyLTc3ZGEtNDhkZC05YWEwLThlN2ZmZGEwNDg0NiIsImlhdCI6MTcwMTU5MjE3MywiZXhwIjoxNzAxNTk1NzczfQ.2Wz2yrLLYE07HA5TYaJJSJxR5F0LJ7ttAFkOggnnajk',
      'Content-Type': 'application/json',
  }

  df = pd.DataFrame([], columns = ['Average Speed', 'Speed Limit', 'Congestion'])

  try:
      response = requests.get('https://api.iq.inrix.com/v1/segments/speed?box=37.757386%7C-122.490667%2C37.746138%7C-122.395481&SpeedOutputFields=All', headers=headers)
      response.raise_for_status()  # Raise an exception for bad responses

      # Assuming the API response is in JSON format
      api_data = response.json()
      #api_data = json.loads(api_data)
      #print(api_data.get("result").get("segmentspeeds")[0].get("segments"))

      # Save the JSON data to a file
      for segment in api_data.get("result").get("segmentspeeds")[0].get("segments"):
        average = float(segment["average"])
        speedlimit = float(segment["reference"])
        congestion = 1 - (average / speedlimit)
        df.loc[len(df.index)] = [average, speedlimit, congestion]

  except requests.exceptions.RequestException as e:
    print(f"Error making API call: {e}")

  return df

def make_neural_network():
    data = get_inrix_data()

    # Selecting features (X) and target variable (y)
    X = data[['Average Speed', 'Speed Limit']].astype(float)
    y = data['Congestion']

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

    # Standardize features using StandardScaler
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Build the neural network model
    model = Sequential()
    model.add(Dense(units=64, activation='relu', input_dim=2))  # 2 input features
    model.add(Dense(units=32, activation='relu'))
    model.add(Dense(units=1, activation='linear'))  # 1 output for regression

    # Compile the model
    model.compile(optimizer='adam', loss='mean_squared_error')

    # Train the model
    model.fit(X_train_scaled, y_train, epochs=50, batch_size=2, verbose=1)

    # Evaluate the model on the test set
    y_pred = model.predict(X_test_scaled)

    mse = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error: {mse}")

    # test a new data point
    for i in [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70]:
      x_new = pd.DataFrame([[35, i]], columns = ['Average Speed', 'Speed Limit'])
      x_new_scaled = scaler.transform(x_new)
      y_new = model.predict(x_new_scaled)
      print(i, y_new)

def main():
  make_neural_network()

if __name__ == "__main__":
    main()